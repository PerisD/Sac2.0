__author__ = 'Peris'

#!/usr/bin/env python
#coding: utf-8

import argparse
import pandas as pd
import os
import glob

helptext="""
This script is to generate formats for programs, such as PLINK, PCAdmix, ADMIXTOOLS, Genesis
It uses the _merged.vcf file generated by ConvertOutputs_Mapping2GenomPopAnalysisTools.py
Authors: David Peris IATA-CSIC, Dept. Food Biotechnology
"""


parser = argparse.ArgumentParser(description=helptext,formatter_class=argparse.RawTextHelpFormatter)
parser.add_argument("-i","--input", help="a vcf merged file generated by ConvertOutputs_Mapping2GenomPopAnalysisTools.py", type = str, default = None)
parser.add_argument("-o","--output", help="a tag for the output name, for example Skud for Skudriavzevii files", type = str, default = None)
parser.add_argument("-s","--strainInfo", help="a csv file with strain information: species and population, i.e. StrainInfo_Skud.csv", type = str, default = None)
parser.add_argument("-m","--maf", help="a value between 0.0 and 1.0 to specify the MAF, default NO", type = str, default = "NO")
parser.add_argument("-r","--remIndels", help="remove indels, default YES", type = str, default = "YES")
parser.add_argument("-Q","--quality", help="minimum quality, default 20", type = str, default = "20")
parser.add_argument("-c","--Rec", help="Recombination rate for each chromosome", type = str, default = None)


parser.set_defaults()

args = parser.parse_args()

vcfchrom_info = open(args.input, 'r') 
chrom_info_new = open("KeepChrNames.txt", 'w')

counter = 1
for line in vcfchrom_info: #It will help to rename the chromosomes to a format used by PLINK to avoid the --aec
	if "##contig=" in line:
		chr_name = line.split('=')[2].split(',')[0]
		chrom_info_new.write(chr_name + '\t' + str(counter) + '\n')
		counter += 1
chrom_info_new.close()

print "Chromosome file for renaiming done!"

#Get unique population designation according to the csv file
StrainInfo_df = pd.read_csv(args.strainInfo, sep=',')
StrainInfo_Pops = StrainInfo_df['Pop'].unique().tolist()
#print StrainInfo_Pops
Strains = StrainInfo_df['Strains'].tolist()
#print Strains

name_output = args.output
vcftools_cmd = "vcftools --vcf " + args.input + " --plink --chrom-map KeepChrNames.txt "
if args.maf != "NO":
	vcftools_cmd += "--maf " + args.maf + " "
	name_output += ".maf" + args.maf
if args.remIndels == "YES":
	vcftools_cmd += "--remove-indels "
	name_output += ".NoIndels"
if args.quality != "":
	vcftools_cmd += "--minQ " + args.quality + " "
	name_output += ".minQ" + args.quality

vcftools_cmd += "--out " + name_output
os.system(vcftools_cmd) #REMOVE once done

print vcftools_cmd

print "Updating Pops"
updatePops_cmd = "less " + name_output + ".ped | cut -f 1,2 > updatePops_temp.txt"
os.system(updatePops_cmd)

#Update Strain Names and Populations
StrainPopsText = open("updatePops_temp.txt", 'r')
StrainPopsText_new = open("updatePops.txt", 'w')

for line in StrainPopsText:
	line = line.strip()
	Old_StrainName = line.split('\t')[0].split('.')[0:-1]
	Old_StrainName = '.'.join(Old_StrainName)
	#print Old_StrainName
	temp_Pop = StrainInfo_df.loc[StrainInfo_df['Strains'] == Old_StrainName,'Pop'].iloc[0]
	#print temp_Pop
	StrainPopsText_new.write(line+'\t'+temp_Pop+'\t'+Old_StrainName+'\n')

os.system("rm updatePops_temp.txt")
StrainPopsText_new.close()

plink_update_cmd = "plink --file " + name_output + " --update-ids updatePops.txt --recode --out "
name_output += ".Pops"
plink_update_cmd += name_output
print plink_update_cmd
os.system(plink_update_cmd) #REMOVE once done

print "IDs updated!"

#Generate the .pedind file and recode to BEAGLE format for some programs such as PCAdmix
pedind_file_cmd = "cat " + name_output + ".ped | cut -d ' ' -f 1-6 > temp_ind.txt"
os.system(pedind_file_cmd)
pedind_file = open("temp_ind.txt",'r')
pedind_file_new = open(name_output+".pedind",'w')

for line in pedind_file:
	line = line.strip()
	StrainName = line.split(' ')[1]
	temp_Pop = StrainInfo_df.loc[StrainInfo_df['Strains'] == StrainName,'Pop'].iloc[0]
	#print temp_Pop
	pedind_file_new.write(line+' '+temp_Pop + '\n')
os.system("rm temp_ind.txt")
pedind_file_new.close()

#Convert to Beagle format for PCAdmix
beagleformat_cmd = "plink --file " + name_output + " --recode beagle-nomap " + "--out " + name_output
print beagleformat_cmd
os.system(beagleformat_cmd) #REMOVE once done

#Check Heterozygous sites of the beagle file
beagle_file = open(name_output+".beagle.dat",'r')
htz_sites = open("htz_sites.txt",'w')
pop_line = beagle_file.next()
pop_line = pop_line.split(' ')
pop_line.remove('\n')
strain_line = beagle_file.next()
strain_line = strain_line.split(' ')
strain_line.remove('\n')
counter = 2
list_strains = []
list_pops = []
list_SNPs = []
list_HTZ = []
while counter < len(pop_line):
	list_strains.append(pop_line[counter])
	list_pops.append(strain_line[counter])
	list_HTZ.append(0)
	counter += 2
beagle_file.next()
total_SNPs = 0
for line in beagle_file:
	counter1 = 0
	line = line.strip().split(' ')
	line = line[3:]
	counter2 = 0
	while counter2 < len(line):
		Value1 = line[counter2]
		Value2 = line[counter2+1]
		if Value1 == Value2:
			list_HTZ[counter1] += 0
		else:
			list_HTZ[counter1] += 1
		counter1 += 1
		counter2 += 2
	total_SNPs += 1
counter = 0
htz_sites.write("Strain\tPop\t#HTZ\tPercentage\n")
while counter < len(list_pops):
	temp_value = (float(list_HTZ[counter])/total_SNPs)*100
	print temp_value
	htz_sites.write(list_strains[counter]+"\t"+list_pops[counter]+"\t"+str(list_HTZ[counter])+"\t"+str(temp_value)+'\n')
	counter += 1
htz_sites.close()
beagle_file.close()

#Convert to Beagle format for PCAdmix
for Population in StrainInfo_Pops:
	temp_Popfile = open(Population+"_Pop.txt",'w')
	temp_Popfile.write(Population)
	temp_Popfile.close()
	beagleformat_cmd2 = "plink --file " + name_output + " --recode beagle-nomap "
	beagleformat_cmd2 += "--keep-fam " + Population+"_Pop.txt "
	beagleformat_cmd2 += "--out " + name_output + ".Pop-" + Population
	print beagleformat_cmd2
	os.system(beagleformat_cmd2) #REMOVE once done

print "Beagle format generated"

#Step to include the genetic position in the map files one in cM and another in M

if args.Rec != "":
	list_mapFiles = glob.glob("*.map")
	recRate_file = pd.read_csv(args.Rec, sep=',')
	for mapfile in list_mapFiles:
		temp_mapfile = open(mapfile,'r')
		temp_mapFilecM = open(mapfile+"cM",'w')
		temp_mapFileM = open(mapfile+"M",'w')
		for line in temp_mapfile:
			line = line.split('\t')
			temp_physicalDis = line[3]
			temp_chromosome = line[1].split(':')[0]
			temp_recRate = recRate_file.loc[recRate_file['Chr'] == temp_chromosome,'Rec_rate'].iloc[0]
			#print temp_recRate
			new_geneticdiscM = int(temp_physicalDis) * (temp_recRate/1000)
			new_line = line
			new_line[2] = str(new_geneticdiscM)
			temp_mapFilecM.write('\t'.join(new_line))
			new_line[2] = str(new_geneticdiscM/100)
			temp_mapFileM.write('\t'.join(new_line))
		temp_mapFileM.close()
		temp_mapFilecM.close()