#!/usr/bin/env python


import os,sys
from Bio import SeqIO
import argparse
import glob
import numpy as np

helptext="""
This script will split the chromosomes by a defined window. It will use data generated by mapping4SNP_v2.0.py
Authors: Peris UW-Madison, Dept Genetics & IATA-CSIC
"""

parser = argparse.ArgumentParser(description=helptext,formatter_class=argparse.RawTextHelpFormatter)
parser.add_argument("-i","--inputFile", help="SequenceID in your fastas to be filtered", type = str, default = None)
parser.add_argument("-o","--outputFolder", help="Output Folder where your filtered sequences will be stored", type = str, default = "Fastafiltered")
parser.add_argument("-p","--prefix", help="a prefix to be added to the new sequences", type = str, default = "")
parser.add_argument("-f","--inputfolder", help="folder to search the fas or fasta files", type = str, default = "./")


parser.set_defaults(spades=True)

args = parser.parse_args()

if not os.path.exists(args.outputFolder):
	os.makedirs(args.outputFolder)

#Section for selecting a name extension for your fasta sequences
output_addition_name = args.prefix

#Section for selecting the file where your desired sequences are contained
desired_sequences = args.inputFile

print "filtering files in", args.inputfolder

#We will generate a list of fasta files in the current path and fas extension will be modified to fasta extension
list_of_files = glob.glob(args.inputfolder + '*.fas*')


#All files have been introduced in our list, however we are going to filter to keep fasta files in a list
wanted = set(line.rstrip("\n").split(None,1)[0] for line in open(desired_sequences))
wanted_list = []
for i in wanted:
	wanted_list.append(i)
print "Found %i unique identifiers in %s" % (len(wanted), desired_sequences)

for fasta_alignment in list_of_files:
	fasta_alignment_name = fasta_alignment.split('/')[-1].split('.')
	output_file = args.outputFolder + "/" + fasta_alignment_name[0] + output_addition_name + "." + fasta_alignment_name[1]
	records = (r for r in SeqIO.parse(fasta_alignment, "fasta") if r.id in wanted)
	list_of_records = []
	for r in SeqIO.parse(fasta_alignment, "fasta"):
		list_of_records.append(r.id)
	main_list = np.setdiff1d(wanted_list,list_of_records)
	count = SeqIO.write(records, output_file, "fasta")
	print "Saved %i records from %s to %s" % (count, fasta_alignment, output_file)
	if count < len(wanted):
		print "%s Warning: %i IDs not found in %s" % (fasta_alignment_name[0],len(wanted)-count, fasta_alignment)
		print main_list

print "Done"

